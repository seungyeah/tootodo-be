name: Build, Test and Deploy

on:
  push:
    branches:
      - master

env:
  SQLX_OFFLINE: true

jobs:
  build:
    name: Build and Test - ${{ matrix.platform.os-name }}
    strategy:
      matrix:
        platform:
          - os-name: Linux-arm64-raspberrypi
            runs-on: ubuntu-20.04
            target: aarch64-unknown-linux-gnu

    runs-on: ${{ matrix.platform.runs-on }}
    services:
      postgres:
        image: postgres:15.6-alpine3.19
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    env:
      DATABASE_URL: ${{ secrets.DATABASE_TEST_URI }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.platform.target }}

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres

      - name: Run SQLx Database Migrations
        run: sqlx migrate run

      - name: Generate SQLX Prepared Queries
        run: cargo sqlx prepare

      - name: Build and Test
        run: |
          cargo build --verbose
          cargo test --verbose

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true

      - name: Publish artifacts
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: ubi
          target: ${{ matrix.platform.target }}

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        uses: docker/bake-action@v4.2.0
        with:
          push: true
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Copy Configuration Files
        run: |
          scp -o StrictHostKeyChecking=no Caddyfile ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} "
            export $(echo '
              DATABASE_URL=${{ secrets.DATABASE_CONTAINER_URL }}
              CLIENT_ORIGIN=${{ secrets.CLIENT_ORIGIN }}
              DOMAIN=${{ secrets.DOMAIN }}
              ACCESS_TOKEN_PRIVATE_KEY=${{ secrets.ACCESS_TOKEN_PRIVATE_KEY }}
              ACCESS_TOKEN_EXPIRED_IN=${{ secrets.ACCESS_TOKEN_EXPIRED_IN }}
              REFRESH_TOKEN_EXPIRED_IN=${{ secrets.REFRESH_TOKEN_EXPIRED_IN }}
              REFRESH_TOKEN_MAXAGE=${{ secrets.REFRESH_TOKEN_MAXAGE }}
              DATABASE_CONTAINER_URL=${{ secrets.DATABASE_CONTAINER_URL }}
              ACCESS_TOKEN_MAXAGE=${{ secrets.ACCESS_TOKEN_MAXAGE }}
              REFRESH_TOKEN_PUBLIC_KEY=${{ secrets.REFRESH_TOKEN_PUBLIC_KEY }}
              ACCESS_TOKEN_PUBLIC_KEY=${{ secrets.ACCESS_TOKEN_PUBLIC_KEY }}
              REFRESH_TOKEN_PRIVATE_KEY=${{ secrets.REFRESH_TOKEN_PRIVATE_KEY }}
              GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
              GOOGLE_OAUTH_REDIRECT_URL=${{ secrets.GOOGLE_OAUTH_REDIRECT_URL }}
              GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
              POSTGRES_USER=${{ secrets.POSTGRES_USER }}
              POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              POSTGRES_DB=${{ secrets.POSTGRES_DB }}
              PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
              PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
              PGADMIN_LISTEN_PORT=${{ secrets.PGADMIN_LISTEN_PORT }}
              MONGODB_TEST_URL=${{ secrets.MONGODB_TEST_URL }}
              MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}
              MONGO_TEST_DATABASE=${{ secrets.MONGO_TEST_DATABASE }}
              MONGODB_URL=${{ secrets.MONGODB_URL }}
            ' | tr '\n' '\0' | xargs -0 -I {} echo 'export {}')

            docker compose down
            docker compose pull
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          "
