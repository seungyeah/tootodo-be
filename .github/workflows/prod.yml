name: Build, Test and Deploy

on:
  push:
    branches:
      - master

env:
  SQLX_OFFLINE: true

jobs:
  build:
    name: Build and Test - ${{ matrix.platform.os-name }}
    strategy:
      matrix:
        platform:
          - os-name: Linux-arm64-raspberrypi
            runs-on: ubuntu-20.04
            target: aarch64-unknown-linux-gnu

    runs-on: ${{ matrix.platform.runs-on }}
    services:
      postgres:
        image: postgres:15.6-alpine3.19
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    env:
      DATABASE_URL: ${{ secrets.DATABASE_TEST_URI }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.platform.target }}

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres

      - name: Run SQLx Database Migrations
        run: sqlx migrate run

      - name: Generate SQLX Prepared Queries
        run: cargo sqlx prepare

      - name: Build and Test
        run: |
          cargo build --verbose
          cargo test --verbose
      
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
        
      - name: Publish artifacts
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: tootodo-be
          target: ${{ matrix.platform.target }}
          retention-days: 1
          
      - name: Debug - List working directory
        run: |
          pwd
          ls -la
      
      - name: Debug - Find executable
        run: |
          find . -name "tootodo-be*"
      
      - name: Debug - Check specific directories
        run: |
          echo "Checking target directory:"
          ls -la target/
          echo "Checking target release directory:"
          ls -la target/${{ matrix.platform.target }}/release/

              

  docker-build-run:
    needs: build
    runs-on: [self-hosted, linux, arm64, rpi]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: List artifacts
        run: |
          echo "Listing available artifacts:"
          artifacts=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts")
          echo "$artifacts"
          
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: tootodo-be-Linux-gnu-arm64.tar.gz
          path: ./artifacts

      - name: Extract binary artifact
        run: |
          tar -xzvf ./artifacts/tootodo-be-Linux-gnu-arm64.tar.gz -C ./artifacts
          tar -xzvf ./artifacts/tootodo-be-Linux-gnu-arm64.tar.gz -C ./artifacts
          echo "Extracted files:"
          ls -R ./artifacts
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker buildx build \
          --platform linux/arm64 \
          -t seungyeah/api-tootodo \
          --build-arg APP_BINARY=./artifacts/tootodo-be \
          .

      - name: Run Docker Containers
        run: |
          docker compose down
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
